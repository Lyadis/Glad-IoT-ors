import "../lib/Msgs.thingml"
import "Clock.thingml"

protocol Websocket;
protocol MQTT;

configuration ServerCfg
@add_c_libraries "mosquitto"
@add_c_libraries "websockets"
@add_c_libraries "ssl"
@add_c_libraries "crypto"
@add_c_libraries "z"
{
	instance c : ClockLinux
	instance s : Server
	
	connector s.clock => c.signal
	
	connector s.arena over MQTT @mqtt_broker_address "127.0.0.1" @mqtt_topic "arena"
	connector s.gui over Websocket @generate_debugGUI "true"
}

thing Server includes ClockMsgs,GladiotorsMsgs,GuiMsgs {
	
	property pingN : UInt8 = 0
	property nextId : UInt8 = 1
	property registered : Boolean[256]
	property scores : Int16[256]
	property shots : Int16[256]
	property hits : Int16[256]
	property pongs : UInt8[256]
	
	property ips1 : UInt8[256]
	property ips2 : UInt8[256]
	property ips3 : UInt8[256]
	property ips4 : UInt8[256]
	
	property playTime : UInt16 = 300
	property timeLeft : UInt16 = 0
	
	property n : UInt8
	property t : UInt16

	required port arena {
		receives register, unregister, shooting, hitInfo, pong
		sends assignID, gameStart, gameStop, ping
	}
	provided port gui {
		receives gui_gameStart, gui_gameStop, getGameStatus, listStatuses
		sends gameStatus, secondsLeft, teamStatus
	}
	required port clock {
		receives clock_tick
	}
	
	function sendTeamStatus(ID : UInt8) do
		gui!teamStatus(ID, registered[ID], scores[ID], shots[ID], hits[ID], ips1[ID],ips2[ID],ips3[ID],ips4[ID])
	end
	
	function unregisterTeam(ID : UInt8) do
		registered[ID] = 0
		scores[ID] = 0
		shots[ID] = 0
		hits[ID] = 0
		pongs[ID] = 0
		ips1[ID] = 0
		ips2[ID] = 0
		ips3[ID] = 0
		ips4[ID] = 0
		sendTeamStatus(ID)
	end
	
	statechart S init Init {
		state Init {
			on entry print "Init server\n"
			transition -> Running
		}
		
		composite state Running init Lounge {
			state Lounge {
				on entry do
					gui!gameStatus(0)
					gui!secondsLeft(playTime)
					arena!gameStop()
				end
				
				internal event gui?getGameStatus action do
					gui!gameStatus(0)
				end
				
				transition -> Playing event gui?gui_gameStart
			}
			
			state Playing {
				on entry do
					n = 1
					while (n < nextId) do
						if (registered[n] == 1) do
							scores[n] = 0
							shots[n] = 0
							hits[n] = 0						
							sendTeamStatus(n)
						end
						n = n + 1
					end
				
					gui!gameStatus(1)
					gui!secondsLeft(playTime)
					arena!gameStart()
					
					timeLeft = playTime
				end
				
				internal event clock?clock_tick guard (timeLeft > 1) action do
					timeLeft = timeLeft - 1
					gui!secondsLeft(timeLeft)
				end
				
				transition -> Lounge event clock?clock_tick guard (timeLeft == 1) action do
					timeLeft = 0
					gui!secondsLeft(0)
				end			

				transition -> Lounge event gui?gui_gameStop action do
					timeLeft = 0
					gui!secondsLeft(0)
				end
			
				internal event gui?getGameStatus action do
					gui!gameStatus(1)
				end
				
				internal event s : arena?shooting action do
					shots[s.ID] = shots[s.ID] + 1 
					// TODO: Handle misses and double-hits
					sendTeamStatus(s.ID)
				end
				
				internal event h : arena?hitInfo action do
					hits[h.ID] = hits[h.ID] + 1
					// TODO: Handle misses and double-hits
					sendTeamStatus(h.ID)
				end
			}
			
			internal event clock?clock_tick action do
				arena!ping(pingN)
				pingN = pingN + 1
				
				// Check for disconnected
				n = 1
				while (n < nextId) do
					if (registered[n] == 1) do
						if (pingN < pongs[n]) do
							t = pingN
							t = t + 256 - pongs[n]
							if (t > 5) do
								unregisterTeam(n)
							end
						else
							t = pingN- pongs[n]
							if (t > 5) do
								unregisterTeam(n)
							end
						end
					end
					n = n + 1
				end
			end
			
			internal event p : arena?pong action do
				pongs[p.ID] = p.N
			end			
		
			internal event r : arena?register action do
				registered[nextId] = 1
				scores[nextId] = 0
				shots[nextId] = 0
				hits[nextId] = 0
				pongs[nextId] = pongN
				ips1[nextId] = r.ip1
				ips2[nextId] = r.ip2
				ips3[nextId] = r.ip3
				ips4[nextId] = r.ip4
				
				arena!assignID(nextId, r.ip1, r.ip2, r.ip3, r.ip4)
				sendTeamStatus(nextId)
				nextId = nextId + 1
			end
			
			internal event u : arena?unregister action do
				unregisterTeam(u.ID)
			end
			
			internal event gui?listStatuses action do
				n = 1
				while (n < nextId) do
					if (registered[n] == 1) do
						sendTeamStatus(n)
					end
					n = n + 1
				end
			end
		}
	}
}
