import "../lib/Msgs.thingml"

protocol Serial1;

protocol MQTT;

protocol Websocket;
configuration GladiotorCfg 
@c_compiler "/openwrt-yun/staging_dir/toolchain-mips_r2_gcc-4.6-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-gcc"
@add_c_libraries "mosquitto"
@add_c_libraries "websockets"
@add_c_libraries "ssl"
@add_c_libraries "crypto"
@add_c_libraries "z"
@add_c_libraries_rep "/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/lib"
@add_c_libraries_rep "/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/usr/lib"
@add_c_flags "-I/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/usr/include"
@add_c_flags "-I/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/include"
{
	instance g : Gladiotor
	set g.ip[0] = 192
	set g.ip[1] = 168
	set g.ip[2] = 43
	set g.ip[3] = 101

	connector g.control over Serial1
	@serial_path_to_device "/dev/ttyATH0"
	@serial_baudrate "115200"

	connector g.cmd over Websocket
	@generate_debugGUI "true"

	connector g.arena over MQTT @mqtt_broker_address "10.59.10.3" @mqtt_topic "arena"
}


thing Gladiotor includes GladiotorsMsgs, CmdMsgs, TimerMsgs {
	
	property ID : UInt8 = 0
	property InactiveTime : UInt32 = 1000
	property ip : UInt8[4]

	required port cmd {
		sends beenHit
		receives shootCmd
	}

	required port control {
		sends shootCmd//, timer_start, timer_cancel
		receives beenHit, ready//,timeout
	}

	required port arena {
		sends register, unregister, shooting, hitInfo, pong
		receives assignID, gameStart, gameStop, ping
	}

	statechart C init Init {
		
		state Init {
			on entry print "Init\n"
			transition -> Game event control?ready
		}
		composite state Game init Identification {
			on entry print "Game\n"

			transition -> Game event control?ready
			action do
				if(not(ID == 0)) do
					arena!unregister(ID)
				end
				print "Reset\n"
			end
			
			internal event e : arena?ping action arena!pong(ID, e.N)

			transition -> Game event arena?gameStop

			state Identification {
				on entry do
					print "Identification\n"
					//control!timer_start(1, 3000)
					arena!register(ip[0], ip[1], ip[2], ip[3])
				end

				transition -> Wait event e : arena?assignID
				action do 
					print "received ID\n"
					ID = e.ID
					//control!timer_cancel(1)
				end
				//transition -> Identification event control?timeout
				//action print "timeout\n"
			}

			state Wait {
				transition -> Active event arena?gameStart action print "Game has started\n"
			}
			state Active {
				internal event cmd?shootCmd action do
					control!shootCmd(ID)
					print "pew pew pew\n"
				end

				transition -> Inactive event e : control?beenHit
				action do
					print "beenHit\n"
					arena!hitInfo(ID, e.IDshooter)
					cmd!beenHit(e.IDshooter)
					//control!timer_start(1, InactiveTime)
				end
			}
			state Inactive {
				transition -> Active //event e : control?timeout
				action print "Active again\n"
			}

		}
	}
}
